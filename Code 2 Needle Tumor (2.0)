%Code 2 Needle Tumors
% This code takes all of the segmented images and performs calculations
% including the width of the needle tumor code, the sum of the individual
% invasion area, sum of collective invasion area, and extracts the tumor
% core. 

clear var 
outputfolder = uigetdir('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\','Where would you like to store the converted data?');% Enter output folder
prompt = 'What name handle would you like to use? (s(number).mat will be added automatically)\\n (enter inside single quotes)\\n';
dlgtitle = 'Name Handle';
dims = [1 40];
outputname = inputdlg(prompt, dlgtitle, dims);

prompt = {' What experiment would you like to process? '}; % Enter ExpID
dlgtitle = 'Select Experiment';
dims = [1 40];
ExpID_ = string(inputdlg(prompt, dlgtitle, dims));

prompt = {' Which tumors would you like to process? '}; % Enter tumor indices
dlgtitle = 'Tumor Indices';
dims = [1 40];
wells = inputdlg(prompt, dlgtitle, dims);
tumors = str2num(wells{1}); % Vector of tumor indices that user wants to process

prompt = {' Which days would you like to process? '}; % Assumed that days inputted will be run for each tumor
dlgtitle = 'Days to Process';
dims = [1 40];
days_input = inputdlg(prompt, dlgtitle, dims);
days = str2double(days_input); % Vector of tumor indices that user wants to process
for i = 1: length(tumors)
    for k = 1: length(days)
        Raw_Image = importdata(strcat('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\',ExpID_,'\tu',num2str(tumors(i)),'_d',num2str(days(k)), '.tif')); %add in appropriate file details
        %Ask user if any images need to be rotated in order to have cavity on left side
        figure;
        imshow(imadjust(Raw_Image));
      
        prompt = { 'Would you like to rotate the image?(y/n)'};
        dlgtitle = 'Rotating Images';
        dims = [1 40];
        definput = {'y'};
        answer = inputdlg(prompt, dlgtitle, dims, definput);
        
        if strcmp(answer, 'y')
            Image = flip(Raw_Image, 2);
            Image_adjust = imadjust(Image);
            imshow(Image_adjust);
        else
            Image = Raw_Image;
        end
        
        %Canny edge detection to identify cells, escape cavity, and needle tumor
%periphery
[~,threshold] = edge(Image,'canny');
fudgefactor = 2;
BWs = edge(Image, 'canny', threshold*fudgefactor);

%Shows mask generated from canny edge detection
TPmask = boundarymask(BWs);
TPBoundary = imshow(labeloverlay(Image, TPmask, 'Transparency',0));

% Fill in holes in mask because some edges are detected within needle tumor
% periphery
BWdfill = imfill(TPmask,'holes');
imshow(BWdfill)
title('Binary Image with Filled Holes')

% Morphological closing to further eliminate holes in mask (Works well for
% E2_T9  and E2_T15
se2 = strel('disk', 2);
BWclose = imclose(BWdfill, se2);
imshow(BWclose); 

%Interactive closing that enables user to click larger areas that have not
%been closed by the above methods. User must double click when finished. 
%If there are no big holes, user can simply double click, and the code will
%continue
if i == 1
    fill_title = 'Fill Holes';
    uiwait(msgbox({'Please click on larger black areas of image that you would like to fill.'; 'Double click when finished.'}, fill_title));
end

BWdfill2 = imfill(BWclose);
imshow(BWdfill2)

%Final iteration of fill holes in order to make sure everything was covered
BWdfill3 = imfill(BWdfill2, 'holes');
imshow(BWdfill3)
title('Binary Image with Filled Holes')

prompt = {'Would you like to continue fill (y/n)?'};
    dlgtitle = 'Fill Holes';
    dims = [1 40];
    input = {'y'};
    Fill_again = inputdlg(prompt, dlgtitle, dims, input);
    
if strcmp(Fill_again, 'y')
    Fill2_title = 'Fill Holes';
    uiwait(msgbox({'Please click on larger black areas of image that you would like to fill.'; 'Double click when finished.'}, Fill2_title));
    BWdfill4 = imfill(BWdfill3);
    BW_active_contour = activecontour(Image,BWdfill4,10,'edge');
else
%Active contour to perfect the edge as morphological closing may have
%caused mask to go beyond needle tumor periphery
BW_active_contour = activecontour(Image,BWdfill3,10,'edge');
%imageSegmenter(textureBottom);
end
imshow(BW_active_contour); % shows mask for needle tumor periphery
%(in most cases still connected to cavity)

%By drawing rectangle, user can separate the cavity from the needle tumor
%periphery. This code will generate mask of cut
if i == 1
     msg_title = 'Drawing Elliptical and Rectangular Masks';
     uiwait(msgbox({'Please draw elliptical mask, and double click when finished.';' Then draw rectangular mask, and double click in overlapping region when finished'}));
end
 
ellipseMask1 = drawellipse;
wait(ellipseMask1);
Emask = createMask(ellipseMask1);
%clear ellipseMask1;
line = drawrectangle;
wait(line);
Rmask = createMask(line);

%Flip both rectangular mask and elliptical mask
Rmask_inv = ~Rmask;
Emask_inv = ~Emask;
BW_Rmask = BW_active_contour.*Rmask_inv;
imshow(BW_Rmask);
BW_Emask = BW_Rmask.*Emask_inv;
imshow(BW_Emask);

%Combines both elliptical and rectangular masks into cavity mask
cavity = Rmask+Emask.*(Rmask==0);
imshow(cavity);
cavity_BW = imbinarize(cavity);
imshow(cavity_BW);
%cavity_BW_edge = activecontour(Image,cavity_BW,'edge',50);
%imshow(cavity_BW); 

%Apply edge active contour so that edge properly wraps around the
%tumor periphery
I2Bmask = activecontour(Image,BW_Emask,20,'edge');
imshow(I2Bmask);

%Applies filter to eliminate the smaller segments in code (2 options here:
%area filter and opening
Total_Tumor = bwareaopen(I2Bmask, 200);
imshow(Total_Tumor);


BWmask = boundarymask(Total_Tumor);
imshow(BWmask);
    
Image1_adjust1 = imadjust(Image);
blocations = bwboundaries(Total_Tumor,'noholes');
figure
imshow(Image1_adjust1, []);
for ind = 1:numel(blocations)
    % Convert to x,y order.
    pos = blocations{ind};
    pos = fliplr(pos);
    % Create a freehand ROI.
    drawfreehand('Position', pos);
end

% Convert edited ROI back to masks.
hfhs = findobj(gca, 'Type', 'images.roi.Freehand');
editedMask = false(size(Image1_adjust1));
for ind = 1:numel(hfhs)
    % Accumulate the mask from each ROI
    editedMask = editedMask | hfhs(ind).createMask();
end


editedMask_cont = activecontour(Image,editedMask, 5 ,'edge');
EditedMask_B = boundarymask(editedMask_cont); 
Periphery = labeloverlay(Image1_adjust1, EditedMask_B,'Transparency',0);

imshow(Periphery);%generates outline of tumor periphery separate from escape cavity

BW_active_contour_L = bwlabel(editedMask_cont);
stats = regionprops(logical(BW_active_contour_L),'Centroid', 'Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength');

%Summing all of the individual cells plus entire tumor with invasions
objectnum = length(stats);
area_array = [];
for l=1:objectnum
        s = regionprops(logical(editedMask_cont), 'Area');
        areas = cat(1,s.Area);
        %Concatenate last value of centroids to the end of centroids_arr array (insert as new row to the bottom). 
        area_arr = [area_array; areas];
end 
allareas = [stats.Area];
numcol = length(allareas);
[sortedAreas, sortIndexes] = sort(allareas, 'descend');
Max_area = ismember(BW_active_contour_L, sortIndexes(1));
imshow(Max_area);

% Calculate the distance from tumor to cavity
Add_Images = cavity_BW + Max_area;
imshow(Add_Images);
Add_Images_opp = ~Add_Images;
imshow(Add_Images_opp)
Border=zeros(size(Add_Images_opp),'like', Add_Images_opp);
Pad=1;
Border(Pad:end-Pad,Pad:end-Pad) = 1;
Final=Border.*Add_Images_opp;
Final=logical(Final);
Width=sum(Final,2);
Width(Width == 0) = NaN;
distance_to_cav = min(Width);

[rows1,col] = find(editedMask_cont); %Finds all x and y coordinates of nonzero elements in binary image
Max_xcor_tum = min(col); %max point of invasion spread; this is taking into account individual invasions too
[rows_cav, col_cav] = find(cavity_BW);
Max_xcor_cav = max(col_cav);% Finds maximum point of cavity cut

%Generate masked image with cut off to account for different time
%conditions
Max_area_thresh = zeros(size(Max_area));
% Compute d + x
D_X = distance_to_cav + 615;
Max_xcor_cav3 = Max_xcor_cav + D_X;
for j = 1:size(Max_area, 1)
    for p = 1:size(Max_area, 2)
        pixel = Max_area(j,p); % Use max area here instead of BW2( which includes individual invasions)because individual invasion sum is calculated later
if (p >= Max_xcor_cav3)
    pixel = 0;
else
    pixel = Max_area(j,p);
end
Max_area_thresh(j, p) = pixel;
    end
end
imshow(Max_area_thresh);
Max_area_thresh_BW = imbinarize(Max_area_thresh);

savename = strcat(outputfolder,'/',outputname,'tu',num2str(tumors(i)),'_d', num2str(days(k)),'.mat');
    save(string(savename),'Image','editedMask_cont', 'Periphery', 'Total_Tumor', 'cavity_BW', 'Max_area_thresh_BW', 'distance_to_cav', 'Max_area', 'Max_xcor_cav');
    end
end 


