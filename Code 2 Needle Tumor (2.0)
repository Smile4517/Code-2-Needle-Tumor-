%Code 2 Needle Tumors
% This code takes all of the segmented images and performs calculations
% including the width of the needle tumor code, the sum of the individual
% invasion area, sum of collective invasion area, and extracts the tumor
% core. 

clear var 
outputfolder = uigetdir('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\','Where would you like to store the converted data?');% Enter output folder
prompt = 'What name handle would you like to use? (s(number).mat will be added automatically)\\n (enter inside single quotes)\\n';
dlgtitle = 'Name Handle';
dims = [1 40];
outputname = inputdlg(prompt, dlgtitle, dims);

prompt = {' What experiment would you like to process? '}; % Enter ExpID
dlgtitle = 'Select Experiment';
dims = [1 40];
ExpID_ = string(inputdlg(prompt, dlgtitle, dims));

seg_folder = strcat('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\', ExpID_,'_outputfolder_seg');
filenames = dir(fullfile(seg_folder,'*mat'));
total_num = numel(filenames);

for m = 1:total_num
   f = load(fullfile(seg_folder, filenames(m).name)); 
   % Find the directory separators
    str = strcat(seg_folder, filenames(m).name);
    %Extract tumor number
    slashlocations = regexp(str, '_');
    substr = extractAfter(str, slashlocations(2)+6);
    tumor_num = extractBefore(substr, 2);
    % Extract the day 
    substr = extractAfter(str, slashlocations(3)+1);
    day_num = extractBefore( substr, 2);
   % Rename necessary variables 
   Periphery = f. Periphery;
   Max_area_thresh_BW = f. Max_area_thresh_BW;
   Total_Tumor = f. Total_Tumor;
   distance_to_cav = f. distance_to_cav; 
   editedMask_cont = f. editedMask_cont;
   Image = f.Image;
   Max_area = f. Max_area; 
   Max_xcor_cav = f. Max_xcor_cav;
   cavity_BW = f. cavity_BW;

   
   
BW_active_contour_L = bwlabel(editedMask_cont);
stats = regionprops(logical(BW_active_contour_L),'Centroid', 'Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength');

%Summing all of the individual cells plus entire tumor with invasions
objectnum = length(stats);
area_array = [];
for l=1:objectnum
        s = regionprops(logical(editedMask_cont), 'Area');
        areas = cat(1,s.Area);
        %Concatenate last value of centroids to the end of centroids_arr array (insert as new row to the bottom). 
        area_arr = [area_array; areas];
end 
allareas = [stats.Area];
numcol = length(allareas);
[sortedAreas, sortIndexes] = sort(allareas, 'descend');


BW_active_contour_Max = bwlabel(Max_area_thresh_BW);
stats_c = regionprops(logical(BW_active_contour_Max),'Centroid', 'Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength');
%Summing all of the individual cells plus entire tumor with invasions
objectnum_c = length(stats_c);
area_array_c = [];
for i=1:objectnum
        s = regionprops(logical(Max_area_thresh), 'Area');
        areas = cat(1,s.Area);
        %Concatenate last value of centroids to the end of centroids_arr array (insert as new row to the bottom). 
        area_arr = [area_array_c; areas];
end
%Sum all of the individual cells plus entire tumor with invasions
total_tumor_area = sum(area_arr);

%h = impixelinfo;
allareas_c = [stats_c.Area];
numcol_c = length(allareas_c);
[sortedAreas_c, sortIndexes_c] = sort(allareas_c, 'descend');
Max_area_thresh_BW = ismember(BW_active_contour_Max, sortIndexes_c(1));
imshow(Max_area_thresh_BW);

SE = strel('disk', 80);
Tumor_core_open = imopen(Max_area_thresh_BW, SE);
imshow(Tumor_core_open);

%Code to generate complete tumor core; this will help get rid of the
%curves at the end of the collective invasions that are part of the tumor
%core
Tumor_core_full = imopen(Max_area, SE);
imshow(Tumor_core_full);
Tumor_core_full_mask = activecontour(Image, Tumor_core_full, 'Chan-Vese', 20);
imshow(Tumor_core_full_mask);

%Tumor core for smaller image
Tumor_coreBW_Mask = activecontour(Image, Tumor_core_open, 'Chan-Vese', 20);
imshow(Tumor_coreBW_Mask);

Max_xcor_cav2 = Max_xcor_cav + distance_to_cav + 300;% Add pixels to maximum point of cavity 
[y, x] = find(Tumor_coreBW_Mask);%Locate all nonzero elements in tumor core mask 
[y_cor, x_cor]= find(x == Max_xcor_cav2);% Find where column = max_xcor_cav value
Min_y_width = min(y_cor);
Max_y_width = max(y_cor);
Width_tumor_core = Max_y_width - Min_y_width;
individual_invasion_sum = sum(allareas(sortIndexes(2:numcol)));

Max_area_Image_L = bwlabel(Max_area_thresh_BW);
%Max_area_Image_L_M = bwareaopen(Max_area_Image_L, 400);% removes any small fragments 
stats_Max_Area_thresh = regionprops(logical(Max_area_Image_L), 'Area');

%Stats for tumor core of masked image
stats_tumor_core = regionprops(logical(Tumor_coreBW_Mask), 'Area');
%Tumor Core outline
Tumor_coreBW_Bound = boundarymask(Tumor_coreBW_Mask);
imshow(Tumor_coreBW_Bound);

total_fraction_invaded = 1 -((stats_tumor_core.Area)/(stats_Max_Area_thresh.Area));


% To generate collective invasion image
Subtract1 = imsubtract(Max_area_thresh_BW, Tumor_core_full_mask);
imshow(Subtract1);

% When subtracting the two images above, we get a large white region in the
% area that should be masked. The for loop below sets all of those pixels
% back to zero
Subtract1_a = zeros(size(Max_area));
for j = 1:size(Max_area, 1)
    for k = 1:size(Max_area, 2)
        pixel_s = Subtract1(j,k);
if (k >= (Max_xcor_cav + distance_to_cav + 615))
    pixel_s = 0;
else
    pixel_s = Subtract1(j,k);
end
Subtract1_a(j, k) = pixel_s;
    end
end
imshow(Subtract1_a);

Invasions = bwareaopen(Subtract1_a, 1000); % Filters out areas smaller than 600 pixels
imshow(Invasions); % Final collective invasion image


Invasion_L = bwlabel(Invasions);
Invasion_L_C = bwlabel(Invasions); % Important for cropping images later in selection portion of code
%imshow(label2rgb(BW_active_contour_L));
stats_collective_invasions = regionprops(logical(Invasion_L),'Area');
num = length(stats_collective_invasions);
collective_area_array = [];
collective_area_arr = [];
for i=1:num
        s = regionprops(logical(Invasion_L), 'Area');
        areas = cat(1,s.Area);
        %Concatenate last value of centroids to the end of centroids_arr array (insert as new row to the bottom). 
        collective_area_arr = [collective_area_array; areas];
end

collective_invasion_area = sum(collective_area_arr);

Invasion_mask = boundarymask(Invasions);
imshow(labeloverlay(Image1_adjust1,Invasion_mask, 'Transparency',0));%generates 

BW_active_contour_L2 = bwlabel(Tumor_coreBW_Mask);% Regionprops to extract information from the tumor core
stats_core = regionprops(logical(BW_active_contour_L2),'Centroid', 'Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength');
table_core = struct2table(stats_core);


savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, '.mat');
    save(string(savename),'individual_invasion_sum','Width_tumor_core', 'Tumor_coreBW_Mask', 'total_tumor_area', 'Invasions', 'total_fraction_invaded', 'collective_invasion_area', 'table_core');
end


